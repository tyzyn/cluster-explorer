{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../svelte/App.svelte",
    "../svelte/Settings.svelte",
    "../svelte/Scatter.svelte",
    "../svelte/Search.svelte",
    "../svelte/DescriptionBox.svelte",
    "../svelte/DownloadButton.svelte",
    "../svelte/LassoToggle.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\r\n  import {onMount} from 'svelte';\r\n  import Papa from 'papaparse';\r\n  import {data, labels} from './stores.js';\r\n\r\n  import Scatter from './Scatter.svelte';\r\n  import Settings from './Settings.svelte';\r\n\r\n  onMount(async () => {\r\n    var dataUrl = `http://95.216.141.17:5003/client/static/data/${token}/scatter.csv`;\r\n    fetch(dataUrl)\r\n      .then(d => d.text())\r\n      .then(d => Papa.parse(d, {header: true, skipEmptyLines: true})['data'])\r\n      .then(d => {for (var i in d) {d[i]['index'] = parseInt(i);}; return d})\r\n      .then(d => {data.set(d)})\r\n      .catch(err => {console.log(err)});\r\n\r\n    var labelsUrl = `http://95.216.141.17:5003/client/static/data/${token}/labels.csv`;\r\n    fetch(labelsUrl)\r\n      .then(d => d.text())\r\n      .then(d => Papa.parse(d, {header: true, skipEmptyLines: true})['data'])\r\n      .then(d => {labels.set(d)})\r\n      .catch(err => {console.log(err)});\r\n  });\r\n\r\n</script>\r\n\r\n<div class=\"grid-container\">\r\n  <Scatter/>\r\n  <Settings/>\r\n</div>\r\n\r\n<style>\r\n.grid-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 20px;\r\n}\r\n</style>\r\n",
    "<script>\r\n  import {data, labels} from './stores.js';\r\n  import Search from './Search.svelte';\r\n  import CheckboxUnclustered from './CheckboxUnclustered.svelte';\r\n  import CheckboxLabels from './CheckboxLabels.svelte';\r\n  import DescriptionBox from './DescriptionBox.svelte';\r\n  import LassoToggle from './LassoToggle.svelte';\r\n  import ColourSelect from './ColourSelect.svelte';\r\n  import DownloadButton from './DownloadButton.svelte';\r\n\r\n  function countData(data) {\r\n    return data.length;\r\n  };\r\n</script>\r\n\r\n<div class=\"settings\">\r\n  <center><h3>Cluster Explorer</h3></center>\r\n  <Search/>\r\n  <hr>\r\n  <div class=\"checkbox-container\">\r\n    <CheckboxUnclustered/>\r\n    <CheckboxLabels/>\r\n  </div>\r\n  <hr>\r\n  <div class=\"colour-container\">\r\n    <ColourSelect/>\r\n  </div>\r\n    <hr>\r\n  <div class=\"lasso-container\">\r\n    <LassoToggle/>\r\n  </div>\r\n    <hr>\r\n  <div class=\"download-container\">\r\n    <DownloadButton/>\r\n  </div>\r\n    <hr>\r\n  <DescriptionBox/>\r\n</div>\r\n\r\n<style>\r\n.settings {\r\n  /* background-color: gray; */\r\n  box-sizing: border-box;\r\n  padding: 10px;\r\n  position: relative;\r\n  height: 100%;\r\n}\r\n\r\n:global(.settings-component) {\r\n  height: 30px;\r\n}\r\n\r\n.checkbox-container, .lasso-container, .colour-container, .download-container {\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  }\r\n</style>\r\n",
    "<script>\r\n// import * as d3 from 'd3';\r\n// import * as d3lasso from 'd3-lasso';\r\nimport {data, labels, showUnclustered, showLabels, searchValue, textField, hoverText, lassoMode, colourBy, tag, searchMap, searchMode, lassoSelected} from './stores.js';\r\nimport {onMount} from 'svelte';\r\n\r\nvar w = window.innerWidth * 0.75;\r\nvar h = window.innerHeight * 0.95;\r\nvar r = 5;\r\n\r\nvar x;\r\nvar y;\r\nvar newX;\r\nvar newY;\r\nvar svg;\r\n\r\nvar circles;\r\nvar lasso;\r\n\r\nvar zoom = d3.zoom()\r\n             .scaleExtent([0.8, 25])\r\n             .extent([[0, 0], [w, h]])\r\n             .on(\"zoom\", transformCoords);\r\n\r\nfunction pointClick(d) {\r\n if (Object.keys(d).includes(\"website\")) {\r\n   window.open(d.website, '_blank').focus();\r\n } else if (Object.keys(d).includes(\"domain\")) {\r\n   window.open(\"http://\" + d.domain, '_blank').focus();\r\n }\r\n};\r\n\r\nfunction pointMouseover(d) {\r\n  hoverText.set(d.description);\r\n\r\n  var stopColumns = [\"label\", \"description\", \"x\", \"y\", \"index\", \"vector\"];\r\n  var tooltipColumns = Object.keys(d);\r\n\r\n  var html = \"\";\r\n  for (const col of tooltipColumns) {\r\n    if (!stopColumns.includes(col) && `${d[col]}`.length < 100) {\r\n      html += \"<b>\" + col + \": </b>\" + d[col] + \"<br>\"\r\n    }\r\n  };\r\n\r\n  if (d.label !== \"\") {\r\n    html += \"<b>label: <span style='color:\" + tagScale(d.label) + \";'>\" + d.label + \"</span></b>\"\r\n  }\r\n\r\n  var tooltip = d3.select(\"div .scatter\")\r\n                  .append(\"div\")\r\n                  .attr(\"class\", \"tooltip\")\r\n                  .style(\"visibility\", \"visible\");\r\n\r\n  tooltip.html(html)\r\n       .style(\"left\", (d3.event.pageX + 15) + \"px\")\r\n       .style(\"top\", (d3.event.pageY - 28) + \"px\")\r\n       .transition()\r\n       .duration(100)\r\n       .style(\"opacity\", .9);\r\n\r\n  d3.select(this).style(\"r\", r * 2);\r\n};\r\n\r\nfunction pointMouseout(d) {\r\n  hoverText.set('');\r\n\r\n  d3.selectAll(\".tooltip\").remove();\r\n  d3.select(this).style(\"r\", r);\r\n};\r\n\r\nfunction transformCoords() {\r\n  // recover the new scale\r\n  newX = d3.event.transform.rescaleX(x);\r\n  newY = d3.event.transform.rescaleY(y);\r\n\r\n  // update circle position\r\n  svg.selectAll(\"circle\")\r\n     .data($data)\r\n     .attr('cx', function(d) {return newX(d.x)})\r\n     .attr('cy', function(d) {return newY(d.y)});\r\n\r\n svg.selectAll(\".cluster-label\")\r\n    .data($labels)\r\n    .attr('x', function(d) {return newX(d.x)})\r\n    .attr('y', function(d) {return newY(d.y)});\r\n};\r\n\r\nvar seenData = false;\r\nvar seenLabels = false;\r\n\r\nfunction init() {\r\n  if (seenData && seenLabels) {\r\n    return;\r\n  };\r\n\r\n  if ($data.length === 0) {\r\n    return;\r\n  } else {\r\n    seenData = true;\r\n  };\r\n\r\n  if ($labels.length !== 0) {\r\n    seenLabels = true;\r\n  };\r\n\r\n  var xs = $data.map(row => parseFloat(row['x']));\r\n  var ys = $data.map(row => parseFloat(row['y']));\r\n\r\n  var xmin = Math.min(...xs);\r\n  var xmax = Math.max(...xs);\r\n  var ymin = Math.min(...ys);\r\n  var ymax = Math.max(...ys);\r\n\r\n  x = d3.scaleLinear()\r\n    .domain([xmin, xmax])\r\n    .range([0, w]);\r\n\r\n  y = d3.scaleLinear()\r\n    .domain([ymin, ymax])\r\n    .range([h, 0]);\r\n\r\n  circles = svg.selectAll(\"circle\")\r\n      .data($data)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"cx\", d => x(d.x))\r\n      .attr(\"cy\", d => y(d.y))\r\n      .attr(\"r\", r)\r\n      .style(\"fill\", \"#c8c8c8\")\r\n      .on(\"mouseover\", pointMouseover)\r\n      .on(\"mouseout\", pointMouseout)\r\n      .on(\"click\", pointClick);\r\n\r\n  svg.selectAll(\"text\")\r\n      .data($labels)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"x\", d => x(d.x))\r\n      .attr(\"y\", d => y(d.y))\r\n      .attr(\"class\", \"cluster-label\")\r\n      .style(\"font-size\", \"14px\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(d => d.label);\r\n\r\n  if (( seenData && !seenLabels ) || ( !seenData && seenLabels )) {\r\n    d3.select(\"div .scatter\")\r\n      .append(\"div\")\r\n      .attr(\"class\", \"tooltip\")\r\n      .style(\"visibility\", \"hidden\");\r\n  };\r\n\r\n  console.log(circles);\r\n  lasso = d3.lasso()\r\n            .closePathSelect(true)\r\n            .closePathDistance(100)\r\n            .items(circles)\r\n            .targetArea(svg)\r\n            .on(\"start\",lasso_start)\r\n            .on(\"draw\",lasso_draw)\r\n            .on(\"end\",lasso_end);\r\n\r\n  handleShowUnclustered();\r\n  handleShowLabels();\r\n  handleLassoMode();\r\n  updateLegend();\r\n};\r\n\r\nvar tagScale = d3.scaleOrdinal(d3.schemeCategory10);\r\nfunction updateLegend() {\r\n  var labels = Array.from(new Set($data.filter(d => d['label'] != '').map(d => d['label'])));\r\n  var labelsCounts = labels.map(l => [l, $data.map(d => d['label']).filter(x => x == l).length]);\r\n  labelsCounts = labelsCounts.sort((a,b) => b[1] - a[1]).slice(0, 5);\r\n\r\n  var ordinal = d3.scaleOrdinal()\r\n  .domain(labelsCounts.map(l => l[0] + ' ' + l[1]))\r\n  .range(labelsCounts.map(l => tagScale(l[0])));\r\n\r\n  svg.selectAll(\"g.legendOrdinal\").remove();\r\n\r\n  svg.append(\"g\")\r\n    .attr(\"class\", \"legendOrdinal\")\r\n    .attr(\"transform\", \"translate(20,20)\");\r\n\r\n  var legendOrdinal = d3.legendColor()\r\n    .shape(\"path\", d3.symbol().type(d3.symbolCircle).size(150)())\r\n    .shapePadding(10)\r\n    .scale(ordinal);\r\n\r\n  svg.select(\".legendOrdinal\")\r\n    .call(legendOrdinal);\r\n};\r\n\r\nfunction lasso_start() {};\r\n\r\nfunction lasso_draw() {};\r\n\r\nfunction lasso_end() {\r\n  var selected;\r\n  if ($lassoSelected) {\r\n    selected = lasso.selectedItems(d3.selectAll(\"circle\")).filter(\".selected\").data();\r\n  } else {\r\n    selected = lasso.selectedItems(d3.selectAll(\"circle\")).data();\r\n  }\r\n\r\n  if (!$showUnclustered) {\r\n    selected = selected.filter(c => c.cluster !== \"-1\");\r\n  }\r\n  var selectedIndices = selected.map(c => c.index);\r\n  console.log(selectedIndices);\r\n\r\n  var dataCopy = JSON.parse(JSON.stringify($data));\r\n  dataCopy.forEach(function(d, i) {\r\n    if (selectedIndices.includes(d.index)) {\r\n      dataCopy[i][\"label\"] = ($lassoMode === \"erase\") ? \"\" : $tag;\r\n    };\r\n  });\r\n\r\n  data.set(dataCopy);\r\n\r\n  if (selectedIndices.length > 0) {\r\n    colourBy.set(['label', 'categorical']);\r\n    handleColourBy();\r\n  };\r\n\r\n  colourBy.set(['label', 'categorical']);\r\n  updateLegend();\r\n};\r\n\r\nfunction handleShowUnclustered() {\r\n  svg.selectAll(\"circle\")\r\n    .data($data)\r\n    .style(\"visibility\", d => {\r\n      if ($showUnclustered) {\r\n        return \"visible\";\r\n      } else {\r\n        return (d[\"cluster\"] == -1) ? \"hidden\" : \"visible\";\r\n      };\r\n    });\r\n};\r\n\r\nfunction handleShowLabels() {\r\n  svg.selectAll(\".cluster-label\")\r\n     .style(\"visibility\", ($showLabels) ? \"visible\" : \"hidden\");\r\n};\r\n\r\nfunction handleSearch() {\r\n  svg.selectAll(\"circle\")\r\n    .data($data)\r\n    .style(\"fill-opacity\", 0.3)\r\n    .style(\"stroke\", \"none\");\r\n\r\n  var regexSearch = function(d, i) {\r\n    var field;\r\n    var value;\r\n    var negate;\r\n    var regex;\r\n    var match;\r\n\r\n    var searchMapCopy = $searchMap.filter(s => s['value'] !== '');\r\n    if (searchMapCopy.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      for (let i = 0; i < searchMapCopy.length; i++) {\r\n        field = searchMapCopy[i]['field'];\r\n        value = searchMapCopy[i]['value'];\r\n        negate = searchMapCopy[i]['negate'];\r\n        regex = new RegExp('\\\\b' + value + '\\\\b', 'i');\r\n        match = d[field].toLowerCase().search(regex) != -1;\r\n\r\n        if (negate) {\r\n          match = !match;\r\n        };\r\n\r\n        if ($searchMode === 'conjunction') {\r\n          if (!match) {\r\n            return false;\r\n          };\r\n        } else {\r\n          if (match) {\r\n            return true;\r\n          };\r\n        };\r\n\r\n      };\r\n    } catch (error) {\r\n      return false;\r\n    };\r\n    return $searchMode === 'conjunction';\r\n  };\r\n\r\n  // try {\r\n  //   var regex = new RegExp('\\\\b' + $searchValue + '\\\\b', 'i');\r\n  // } catch (error) {\r\n  //   console.error(error);\r\n  //   return\r\n  // };\r\n\r\n  svg.selectAll(\"circle\")\r\n    .data($data)\r\n    .classed('selected', false);\r\n\r\n  svg.selectAll(\"circle\")\r\n    .data($data)\r\n    .filter(regexSearch)\r\n    .style(\"fill-opacity\", 0.7)\r\n    .style(\"stroke\", \"black\")\r\n    .classed('selected', true);\r\n};\r\n\r\nfunction handleLassoMode() {\r\n  if ($tag === 'Add Label') {\r\n    lassoMode.set('zoom');\r\n    return\r\n  };\r\n\r\n  if ($lassoMode === 'zoom') {\r\n    svg.call(zoom);\r\n    svg.on(\".dragstart\", null)\r\n       .on(\".drag\", null)\r\n       .on(\".dragend\", null);\r\n\r\n  } else {\r\n    svg.on('.zoom', null);\r\n    svg.call(lasso);\r\n  };\r\n};\r\n\r\nfunction handleColourBy() {\r\n  var colourColumn;\r\n  var colourScaleType;\r\n  if ($colourBy.length === 0) {\r\n    colourScaleType = 'none';\r\n  } else {\r\n    colourColumn = $colourBy[0];\r\n    colourScaleType = $colourBy[1];\r\n  }\r\n\r\n  if (colourScaleType === 'continuous') {\r\n\r\n    var elems = $data.filter(row => row[colourColumn] !== '').map(row => parseFloat(row[colourColumn]));\r\n    var minVal = Math.min(...elems);\r\n    var maxVal = Math.max(...elems);\r\n    var continuousScale = d3.scaleSequential().domain([minVal, maxVal]).interpolator(d3.interpolateCool);\r\n    svg.selectAll(\"circle\")\r\n      .data($data)\r\n      .style(\"fill\", d => (d[colourColumn] === \"\") ? \"#c8c8c8\" : continuousScale(parseFloat(d[colourColumn])));\r\n\r\n  } else if (colourColumn === 'label') {\r\n\r\n    svg.selectAll(\"circle\")\r\n      .data($data)\r\n      .style(\"fill\", d => (d[colourColumn] === \"\") ? \"#c8c8c8\" : tagScale(d[colourColumn]));\r\n\r\n  } else if (colourScaleType === 'categorical') {\r\n    var categoricalScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n    svg.selectAll(\"circle\")\r\n      .data($data)\r\n      .style(\"fill\", d => (d[colourColumn] === \"\" || (colourColumn === \"cluster\" && d[colourColumn] === \"-1\")) ? \"#c8c8c8\" : categoricalScale(d[colourColumn]));\r\n\r\n  } else {\r\n    svg.selectAll(\"circle\")\r\n      .data($data)\r\n      .style(\"fill\", \"#c8c8c8\");\r\n  };\r\n};\r\n\r\nlet el;\r\nonMount(() => {\r\n\r\n  svg = d3.select(el)\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .on(\"wheel\", function(e, d) {\r\n      lassoMode.set(\"zoom\")\r\n    }).on(\"contextmenu\", function (e, d) {\r\n      d3.event.preventDefault();\r\n      lassoMode.set(\"lasso\");\r\n    });\r\n\r\n  data.subscribe(() => {\r\n    init();\r\n    dataGlobal = $data;\r\n  });\r\n\r\n  labels.subscribe(() => {\r\n    init();\r\n  });\r\n\r\n  showUnclustered.subscribe(handleShowUnclustered);\r\n  showLabels.subscribe(handleShowLabels);\r\n  searchValue.subscribe(handleSearch);\r\n  textField.subscribe(handleSearch);\r\n  lassoMode.subscribe(handleLassoMode);\r\n  colourBy.subscribe(handleColourBy);\r\n  searchMap.subscribe(handleSearch);\r\n  searchMode.subscribe(handleSearch);\r\n});\r\n\r\n</script>\r\n\r\n<div class=\"scatter\" bind:this={el}>\r\n</div>\r\n\r\n<style>\r\n.scatter {\r\n  box-sizing: border-box;\r\n  padding: 10px;\r\n  position: relative;\r\n  height: 100%;\r\n}\r\n</style>\r\n",
    "<script>\r\nimport {data, searchValue, textField, searchMap, searchMode} from './stores.js';\r\n\r\nvar columns = [];\r\nvar fetchedColumns;\r\n\r\nvar selected = 0;\r\nvar searchNum = 1;\r\nvar searchMapLocal = [{'value':'', 'field':'', 'negate':false}];\r\n\r\nfunction fetchColumns() {\r\n  if (($data.length !== 0) && (!fetchedColumns)) {\r\n    columns = Object.keys($data[0]);\r\n    columns = columns.filter(column => !$data.every(d => /^\\-?[0-9]*\\.?[0-9]+$/.test(d[column])));\r\n\r\n    textField.set(columns[0]);\r\n\r\n    searchMapLocal.forEach(d => d['field'] = columns[0]);\r\n    fetchedColumns = true;\r\n  }\r\n};\r\n\r\ndata.subscribe(() => {\r\n  fetchColumns();\r\n})\r\n\r\nsearchMap.subscribe(value => {\r\n  console.log(value);\r\n})\r\n\r\nfunction handleSearch(d) {\r\n  $searchMap = searchMapLocal;\r\n  selected = d3.selectAll(\"circle\").filter(\".selected\").data().length;\r\n}\r\n\r\nvar text = $searchValue;\r\n$: if (text === '') {\r\n  handleSearch();\r\n};\r\n\r\nfunction increment() {\r\n  searchNum += 1;\r\n  searchMapLocal.push({'value':'', 'field':columns[0], 'negate':false});\r\n  $searchMap = searchMapLocal;\r\n  selected = d3.selectAll(\"circle\").filter(\".selected\").data().length;\r\n}\r\n\r\nfunction decrement() {\r\n  searchNum -= 1;\r\n  searchMapLocal.pop();\r\n  $searchMap = searchMapLocal;\r\n  selected = d3.selectAll(\"circle\").filter(\".selected\").data().length;\r\n}\r\n\r\nfunction negate(i) {\r\n  searchMapLocal[i]['negate'] = !searchMapLocal[i]['negate'];\r\n  $searchMap = searchMapLocal;\r\n  selected = d3.selectAll(\"circle\").filter(\".selected\").data().length;\r\n}\r\n\r\nfunction modeChange() {\r\n  $searchMode = event.currentTarget.value;\r\n}\r\n</script>\r\n\r\n<center><p>{selected} Selected</p></center>\r\n\r\n{#each Array(searchNum) as _, i}\r\n  <div class=\"search-container\">\r\n    <div style=\"float:left; margin-right:10px\">\r\n      <button class:active={searchMapLocal[i]['negate']} class=\"settings-component\" on:click=\"{() => negate(i)}\">!</button>\r\n    </div>\r\n\r\n    <div style=\"float:left; margin-right:10px\">\r\n      <input class=\"settings-component\" type=search bind:value={searchMapLocal[i]['value']} on:search={handleSearch}>\r\n    </div>\r\n\r\n    <div style=\"float:left;\">\r\n      <select class=\"settings-component\" name=\"text-to-search\" id=\"text-to-search\" bind:value={searchMapLocal[i]['field']} on:change={handleSearch}>\r\n        {#each columns as column}\r\n          <option value={column}>\r\n            {column}\r\n          </option>\r\n        {/each}\r\n      </select>\r\n    </div>\r\n\r\n    {#if i == searchNum-1}\r\n    <div style=\"float:left; margin-left:10px\">\r\n      <button class=\"settings-component\" on:click={increment}>+</button>\r\n    </div>\r\n    {/if}\r\n    {#if (i == searchNum-1) && (i != 0)}\r\n    <div style=\"float:left; margin-left:10px\">\r\n      <button class=\"settings-component\" on:click={decrement}>-</button>\r\n    </div>\r\n    {/if}\r\n  </div>\r\n{/each}\r\n\r\n<div class=\"search-container\">\r\n  <label>\r\n    <input checked={$searchMode===\"conjunction\"} on:change={modeChange} type=\"radio\" name=\"amount\" value=\"conjunction\"/> Conjunction\r\n  </label>\r\n  <label>\r\n    <input checked={$searchMode===\"disjunction\"} on:change={modeChange} type=\"radio\" name=\"amount\" value=\"disjunction\"/> Disjunction\r\n  </label>\r\n</div>\r\n\r\n<style>\r\n.search-container {\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.active {\r\n\tbackground-color: pink;\r\n}\r\n\r\n#text-to-search {\r\n  width: 100%;\r\n}\r\n</style>\r\n",
    "<script>\r\nimport {hoverText, searchValue} from './stores.js';\r\n\r\nfunction formatText(text) {\r\n    text = text.slice(0, 1000) + ((text.length > 1000) ? \"...\" : \"\");\r\n\r\n    if ($searchValue !== '') {\r\n      try {\r\n        var regex = new RegExp('\\\\b(' + $searchValue + ')\\\\b', 'ig');\r\n        text = text.replaceAll(regex, '<span class=\"text-highlight\">$1</span>')\r\n      } catch (error) {\r\n          console.error(error);\r\n          return\r\n      };\r\n    }\r\n\r\n  return text\r\n}\r\n</script>\r\n\r\n<div class=\"description-box\">\r\n<p>{@html formatText($hoverText)}</p>\r\n</div>\r\n\r\n<style>\r\n.description-box {\r\n  clear: left;\r\n}\r\n</style>\r\n",
    "<script>\r\nimport {data} from './stores.js';\r\nimport tsv from 'tsv';\r\n\r\nvar downloadAll = false;\r\nfunction downloadFile() {\r\n    console.log('download');\r\n    var fileLink = window.document.createElement('a');\r\n\r\n    var filteredData;\r\n    if (downloadAll) {\r\n      filteredData = $data;\r\n    } else {\r\n      filteredData = $data.filter(d => d.label !== \"\");\r\n    }\r\n\r\n    var tsvData = new Blob([tsv.stringify(filteredData)], {type: 'text/plain'});\r\n\r\n    fileLink.href = window.URL.createObjectURL(tsvData);\r\n    fileLink.download = 'cluster_explorer.data.tsv';\r\n\r\n    document.body.appendChild(fileLink);\r\n    fileLink.click();\r\n    document.body.removeChild(fileLink);\r\n  };\r\n</script>\r\n\r\n<label>\r\n<input type=checkbox bind:checked={downloadAll}>\r\nDownload All\r\n</label>\r\n<button class=\"settings-component\" on:click={downloadFile}>Download TSV</button>\r\n\r\n<style>\r\nlabel {\r\n  margin-right: 20px;\r\n}\r\n</style>\r\n",
    "<script>\r\n  import {data, tag, lassoMode, lassoSelected} from './stores.js';\r\n\r\n  var newLabel = \"\";\r\n  var tags = [];\r\n  var fetchedTags = false;\r\n\r\n  function handleClick(mode) {\r\n    lassoMode.set(mode);\r\n  }\r\n\r\n  function fetchTags() {\r\n    if (($data.length !== 0) && (!fetchedTags)) {\r\n      tags = [...new Set($data.map(d => d.label).filter(d => d !== ''))];\r\n      console.log(tags);\r\n      if (tags.length === 0) {\r\n        tag.set('Add Label');\r\n      } else {\r\n        tag.set(tags[0]);\r\n      }\r\n      fetchedTags = true;\r\n    }\r\n  };\r\n\r\n  function handleAddLabel() {\r\n    tags.push(newLabel);\r\n    tags = tags;\r\n    tag.set(newLabel);\r\n    newLabel = '';\r\n  };\r\n\r\n  data.subscribe(() => {\r\n    fetchTags();\r\n  });\r\n\r\n  tag.subscribe(value => {\r\n    if (value === \"Add Label\") {\r\n      lassoMode.set('zoom');\r\n    };\r\n  })\r\n</script>\r\n\r\n<div class=\"container\">\r\n  <div class=\"grid1\">\r\n    <button class=\"settings-component\" class:active={$lassoMode === 'zoom'} on:click=\"{() => handleClick('zoom')}\">Zoom</button>\r\n  </div>\r\n  <div class=\"grid2\">\r\n    {#if $tag === \"Add Label\"}\r\n      <button class=\"settings-component\" disabled>Lasso</button>\r\n    {:else}\r\n      <button class=\"settings-component\" class:active={$lassoMode === 'lasso'} on:click=\"{() => handleClick('lasso')}\">Lasso</button>\r\n    {/if}\r\n  </div>\r\n  <div class=\"grid3\">\r\n    {#if $tag === \"Add Label\"}\r\n      <button class=\"settings-component\" disabled>Erase</button>\r\n    {:else}\r\n      <button class=\"settings-component\" class:active={$lassoMode === 'erase'} on:click=\"{() => handleClick('erase')}\">Erase</button>\r\n    {/if}\r\n  </div>\r\n  <div class=\"grid4\">\r\n    <select class=\"settings-component\" name=\"select-tag\" id=\"select-tag\" bind:value={$tag}>\r\n      {#each tags as tag}\r\n        <option value={tag}>\r\n          {tag}\r\n        </option>\r\n      {/each}\r\n      <option value=\"Add Label\">Add Label</option>\r\n    </select>\r\n  </div>\r\n  <div class=\"grid5\">\r\n    <center>\r\n    <div class=\"add-label\">\r\n    {#if $tag === \"Add Label\"}\r\n      <input class=\"settings-component\" type=search bind:value={newLabel} on:search={handleAddLabel}>\r\n    {:else}\r\n      <input class=\"settings-component\" type=search disabled>\r\n    {/if}\r\n    </div>\r\n    </center>\r\n  </div>\r\n  <div class=\"grid6\">\r\n  <center>\r\n  <label>\r\n  \t<input type=checkbox bind:checked={$lassoSelected}>\r\n  \tLasso Selected\r\n  </label>\r\n  </center>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n.add-label {\r\n  margin-top: 5px;\r\n}\r\n\r\n.active {\r\n\tbackground-color: pink;\r\n}\r\n\r\n.settings-component {\r\n  margin-right: 10px;\r\n}\r\n\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: .5fr .5fr .5fr;\r\n  grid-template-rows: 1fr 1fr .5fr;\r\n  gap: 0px 0px 0px;\r\n  grid-auto-flow: row;\r\n  grid-template-areas:\r\n    \"grid1 grid2 grid3\"\r\n    \"grid4 grid4 grid4\"\r\n    \"grid5 grid5 grid5\"\r\n    \"grid6 grid6 grid6\";\r\n}\r\n\r\n.grid1 { grid-area: grid1; }\r\n\r\n.grid2 { grid-area: grid2; }\r\n\r\n.grid3 { grid-area: grid3; }\r\n\r\n.grid4 { grid-area: grid4; }\r\n\r\n.grid5 { grid-area: grid5; }\r\n\r\n.grid6 { grid-area: grid6; }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAkCA,eAAe,cAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,QAAQ,CAAE,IAAI,AAClB,CAAC;ACED,SAAS,eAAC,CAAC,AAET,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AAEO,mBAAmB,AAAE,CAAC,AAC5B,MAAM,CAAE,IAAI,AACd,CAAC,AAED,kCAAmB,CAAE,+BAAgB,CAAE,gCAAiB,CAAE,mBAAmB,eAAC,CAAC,AAC7E,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACvB,CAAC;AC+VH,QAAQ,cAAC,CAAC,AACR,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,AACd,CAAC;AC/SD,iBAAiB,cAAC,CAAC,AACjB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACvB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,KAAK,CAAE,IAAI,AACb,CAAC;AClGD,gBAAgB,eAAC,CAAC,AAChB,KAAK,CAAE,IAAI,AACb,CAAC;ACOD,KAAK,cAAC,CAAC,AACL,YAAY,CAAE,IAAI,AACpB,CAAC;ACwDD,UAAU,cAAC,CAAC,AACV,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACvB,CAAC,AAED,mBAAmB,cAAC,CAAC,AACnB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CACrC,kBAAkB,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAChC,GAAG,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAChB,cAAc,CAAE,GAAG,CACnB,mBAAmB,CACjB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC,AAE5B,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC,AAE5B,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC,AAE5B,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC,AAE5B,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC,AAE5B,MAAM,cAAC,CAAC,AAAC,SAAS,CAAE,KAAK,AAAE,CAAC"
}